2023-02-05 18:08:44,803 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /data/apps/cuda/11.1
NVCC: Cuda compilation tools, release 11.1, V11.1.74
GCC: gcc (GCC) 7.3.0
PyTorch: 1.8.1+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.9.1+cu111
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMClassification: 0.25.0+3d4f80d
------------------------------------------------------------

2023-02-05 18:08:44,804 - mmcls - INFO - Distributed training: False
2023-02-05 18:08:44,900 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=2048,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, )))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='ImageNet',
        data_prefix='data/flower/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        ann_file='data/flower/train.txt',
        classes='data/flower/classes.txt'),
    val=dict(
        type='ImageNet',
        data_prefix='data/flower/val',
        ann_file='data/flower/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes='data/flower/classes.txt'),
    test=dict(
        type='ImageNet',
        data_prefix='data/flower/val',
        ann_file='data/flower/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes='data/flower/classes.txt'))
evaluation = dict(interval=1, metric='accuracy')
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = '/HOME/scz0apx/run/mmclassification/resnet50_8xb32_in1k_20210831-ea4938fc.pth'
resume_from = None
workflow = [('train', 1)]
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[1])
runner = dict(type='EpochBasedRunner', max_epochs=100)
work_dir = 'work/resnet18_b32_flower'
gpu_ids = [0]

2023-02-05 18:08:44,929 - mmcls - INFO - Set random seed to 2039823727, deterministic: False
2023-02-05 18:08:45,146 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-05 18:08:45,379 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 2048]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-05 18:08:56,014 - mmcls - INFO - load checkpoint from local path: /HOME/scz0apx/run/mmclassification/resnet50_8xb32_in1k_20210831-ea4938fc.pth
2023-02-05 18:08:56,544 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 2048]) from checkpoint, the shape in current model is torch.Size([5, 2048]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-05 18:08:56,545 - mmcls - INFO - Start running, host: scz0apx@g0004, work_dir: /data/run01/scz0apx/mmclassification/work/resnet18_b32_flower
2023-02-05 18:08:56,545 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-05 18:08:56,545 - mmcls - INFO - workflow: [('train', 1)], max: 100 epochs
2023-02-05 18:08:56,545 - mmcls - INFO - Checkpoints will be saved to /data/run01/scz0apx/mmclassification/work/resnet18_b32_flower by HardDiskBackend.
2023-02-05 18:09:06,507 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-05 18:09:08,119 - mmcls - INFO - Epoch(val) [1][18]	accuracy_top-1: 93.1818, accuracy_top-5: 100.0000
2023-02-05 18:09:16,062 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-05 18:09:17,192 - mmcls - INFO - Epoch(val) [2][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-05 18:09:25,119 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-05 18:09:26,253 - mmcls - INFO - Epoch(val) [3][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 18:09:34,172 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-05 18:09:35,328 - mmcls - INFO - Epoch(val) [4][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 18:09:43,289 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-05 18:09:44,434 - mmcls - INFO - Epoch(val) [5][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 18:09:52,384 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-05 18:09:53,531 - mmcls - INFO - Epoch(val) [6][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 18:10:01,476 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-05 18:10:02,611 - mmcls - INFO - Epoch(val) [7][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 18:10:10,557 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-05 18:10:11,696 - mmcls - INFO - Epoch(val) [8][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 18:10:19,612 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-05 18:10:20,738 - mmcls - INFO - Epoch(val) [9][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-05 18:10:28,647 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-05 18:10:29,781 - mmcls - INFO - Epoch(val) [10][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 18:10:37,731 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-05 18:10:38,875 - mmcls - INFO - Epoch(val) [11][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 18:10:46,795 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-05 18:10:47,929 - mmcls - INFO - Epoch(val) [12][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-05 18:10:55,858 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-05 18:10:56,983 - mmcls - INFO - Epoch(val) [13][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-05 18:11:04,913 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-05 18:11:06,057 - mmcls - INFO - Epoch(val) [14][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-05 18:11:13,978 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-05 18:11:15,109 - mmcls - INFO - Epoch(val) [15][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 18:11:23,050 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-05 18:11:24,186 - mmcls - INFO - Epoch(val) [16][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 18:11:32,130 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-05 18:11:33,282 - mmcls - INFO - Epoch(val) [17][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-05 18:11:41,200 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-05 18:11:42,320 - mmcls - INFO - Epoch(val) [18][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 18:11:50,253 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-05 18:11:51,387 - mmcls - INFO - Epoch(val) [19][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 18:11:59,307 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-05 18:12:00,456 - mmcls - INFO - Epoch(val) [20][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 18:12:08,394 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-05 18:12:09,532 - mmcls - INFO - Epoch(val) [21][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-05 18:12:17,452 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-05 18:12:18,591 - mmcls - INFO - Epoch(val) [22][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 18:12:26,533 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-05 18:12:27,669 - mmcls - INFO - Epoch(val) [23][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 18:12:35,610 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-05 18:12:36,754 - mmcls - INFO - Epoch(val) [24][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 18:12:44,672 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-05 18:12:45,807 - mmcls - INFO - Epoch(val) [25][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 18:12:53,714 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-05 18:12:54,839 - mmcls - INFO - Epoch(val) [26][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 18:13:02,769 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-05 18:13:03,909 - mmcls - INFO - Epoch(val) [27][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 18:13:11,831 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-05 18:13:12,953 - mmcls - INFO - Epoch(val) [28][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 18:13:20,883 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-05 18:13:22,024 - mmcls - INFO - Epoch(val) [29][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 18:13:29,939 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-05 18:13:31,076 - mmcls - INFO - Epoch(val) [30][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 18:13:38,981 - mmcls - INFO - Saving checkpoint at 31 epochs
2023-02-05 18:13:40,110 - mmcls - INFO - Epoch(val) [31][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 18:13:48,028 - mmcls - INFO - Saving checkpoint at 32 epochs
2023-02-05 18:13:49,169 - mmcls - INFO - Epoch(val) [32][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 18:13:57,117 - mmcls - INFO - Saving checkpoint at 33 epochs
2023-02-05 18:13:58,248 - mmcls - INFO - Epoch(val) [33][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 18:14:06,162 - mmcls - INFO - Saving checkpoint at 34 epochs
2023-02-05 18:14:07,299 - mmcls - INFO - Epoch(val) [34][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 18:14:15,224 - mmcls - INFO - Saving checkpoint at 35 epochs
2023-02-05 18:14:16,366 - mmcls - INFO - Epoch(val) [35][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 18:14:24,283 - mmcls - INFO - Saving checkpoint at 36 epochs
2023-02-05 18:14:25,419 - mmcls - INFO - Epoch(val) [36][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 18:14:33,353 - mmcls - INFO - Saving checkpoint at 37 epochs
2023-02-05 18:14:34,485 - mmcls - INFO - Epoch(val) [37][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 18:14:42,410 - mmcls - INFO - Saving checkpoint at 38 epochs
2023-02-05 18:14:43,547 - mmcls - INFO - Epoch(val) [38][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 18:14:51,464 - mmcls - INFO - Saving checkpoint at 39 epochs
2023-02-05 18:14:52,609 - mmcls - INFO - Epoch(val) [39][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 18:15:00,555 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-05 18:15:01,698 - mmcls - INFO - Epoch(val) [40][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 18:15:09,641 - mmcls - INFO - Saving checkpoint at 41 epochs
2023-02-05 18:15:10,784 - mmcls - INFO - Epoch(val) [41][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-05 18:15:18,711 - mmcls - INFO - Saving checkpoint at 42 epochs
2023-02-05 18:15:19,848 - mmcls - INFO - Epoch(val) [42][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-05 18:15:27,760 - mmcls - INFO - Saving checkpoint at 43 epochs
2023-02-05 18:15:28,906 - mmcls - INFO - Epoch(val) [43][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 18:15:36,829 - mmcls - INFO - Saving checkpoint at 44 epochs
2023-02-05 18:15:37,976 - mmcls - INFO - Epoch(val) [44][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 18:15:45,919 - mmcls - INFO - Saving checkpoint at 45 epochs
2023-02-05 18:15:47,063 - mmcls - INFO - Epoch(val) [45][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 18:15:54,991 - mmcls - INFO - Saving checkpoint at 46 epochs
2023-02-05 18:15:56,133 - mmcls - INFO - Epoch(val) [46][18]	accuracy_top-1: 96.6783, accuracy_top-5: 100.0000
2023-02-05 18:16:04,048 - mmcls - INFO - Saving checkpoint at 47 epochs
2023-02-05 18:16:05,199 - mmcls - INFO - Epoch(val) [47][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 18:16:13,134 - mmcls - INFO - Saving checkpoint at 48 epochs
2023-02-05 18:16:14,267 - mmcls - INFO - Epoch(val) [48][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 18:16:22,232 - mmcls - INFO - Saving checkpoint at 49 epochs
2023-02-05 18:16:23,362 - mmcls - INFO - Epoch(val) [49][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 18:16:31,289 - mmcls - INFO - Saving checkpoint at 50 epochs
2023-02-05 18:16:32,424 - mmcls - INFO - Epoch(val) [50][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 18:16:40,354 - mmcls - INFO - Saving checkpoint at 51 epochs
2023-02-05 18:16:41,501 - mmcls - INFO - Epoch(val) [51][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 18:16:49,432 - mmcls - INFO - Saving checkpoint at 52 epochs
2023-02-05 18:16:50,569 - mmcls - INFO - Epoch(val) [52][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 18:16:58,513 - mmcls - INFO - Saving checkpoint at 53 epochs
2023-02-05 18:16:59,635 - mmcls - INFO - Epoch(val) [53][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 18:17:07,559 - mmcls - INFO - Saving checkpoint at 54 epochs
2023-02-05 18:17:08,687 - mmcls - INFO - Epoch(val) [54][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 18:17:16,606 - mmcls - INFO - Saving checkpoint at 55 epochs
2023-02-05 18:17:17,746 - mmcls - INFO - Epoch(val) [55][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 18:17:25,689 - mmcls - INFO - Saving checkpoint at 56 epochs
2023-02-05 18:17:26,819 - mmcls - INFO - Epoch(val) [56][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 18:17:34,755 - mmcls - INFO - Saving checkpoint at 57 epochs
2023-02-05 18:17:35,895 - mmcls - INFO - Epoch(val) [57][18]	accuracy_top-1: 96.5035, accuracy_top-5: 100.0000
2023-02-05 18:17:43,817 - mmcls - INFO - Saving checkpoint at 58 epochs
2023-02-05 18:17:44,973 - mmcls - INFO - Epoch(val) [58][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 18:17:52,917 - mmcls - INFO - Saving checkpoint at 59 epochs
2023-02-05 18:17:54,070 - mmcls - INFO - Epoch(val) [59][18]	accuracy_top-1: 96.5035, accuracy_top-5: 100.0000
2023-02-05 18:18:01,996 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-05 18:18:03,134 - mmcls - INFO - Epoch(val) [60][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 18:18:11,062 - mmcls - INFO - Saving checkpoint at 61 epochs
2023-02-05 18:18:12,206 - mmcls - INFO - Epoch(val) [61][18]	accuracy_top-1: 96.5035, accuracy_top-5: 100.0000
2023-02-05 18:18:20,112 - mmcls - INFO - Saving checkpoint at 62 epochs
2023-02-05 18:18:21,248 - mmcls - INFO - Epoch(val) [62][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 18:18:29,172 - mmcls - INFO - Saving checkpoint at 63 epochs
2023-02-05 18:18:30,309 - mmcls - INFO - Epoch(val) [63][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 18:18:38,235 - mmcls - INFO - Saving checkpoint at 64 epochs
2023-02-05 18:18:39,384 - mmcls - INFO - Epoch(val) [64][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 18:18:47,311 - mmcls - INFO - Saving checkpoint at 65 epochs
2023-02-05 18:18:48,451 - mmcls - INFO - Epoch(val) [65][18]	accuracy_top-1: 96.6783, accuracy_top-5: 100.0000
2023-02-05 18:18:56,364 - mmcls - INFO - Saving checkpoint at 66 epochs
2023-02-05 18:18:57,502 - mmcls - INFO - Epoch(val) [66][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 18:19:05,436 - mmcls - INFO - Saving checkpoint at 67 epochs
2023-02-05 18:19:06,574 - mmcls - INFO - Epoch(val) [67][18]	accuracy_top-1: 96.5035, accuracy_top-5: 100.0000
2023-02-05 18:19:14,501 - mmcls - INFO - Saving checkpoint at 68 epochs
2023-02-05 18:19:15,634 - mmcls - INFO - Epoch(val) [68][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 18:19:23,547 - mmcls - INFO - Saving checkpoint at 69 epochs
2023-02-05 18:19:24,681 - mmcls - INFO - Epoch(val) [69][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 18:19:32,603 - mmcls - INFO - Saving checkpoint at 70 epochs
2023-02-05 18:19:33,746 - mmcls - INFO - Epoch(val) [70][18]	accuracy_top-1: 96.5035, accuracy_top-5: 100.0000
2023-02-05 18:19:41,665 - mmcls - INFO - Saving checkpoint at 71 epochs
2023-02-05 18:19:42,800 - mmcls - INFO - Epoch(val) [71][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 18:19:50,751 - mmcls - INFO - Saving checkpoint at 72 epochs
2023-02-05 18:19:51,877 - mmcls - INFO - Epoch(val) [72][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 18:19:59,810 - mmcls - INFO - Saving checkpoint at 73 epochs
2023-02-05 18:20:00,949 - mmcls - INFO - Epoch(val) [73][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 18:20:08,897 - mmcls - INFO - Saving checkpoint at 74 epochs
2023-02-05 18:20:10,031 - mmcls - INFO - Epoch(val) [74][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 18:20:17,969 - mmcls - INFO - Saving checkpoint at 75 epochs
2023-02-05 18:20:19,154 - mmcls - INFO - Epoch(val) [75][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 18:20:27,067 - mmcls - INFO - Saving checkpoint at 76 epochs
2023-02-05 18:20:28,187 - mmcls - INFO - Epoch(val) [76][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 18:20:36,192 - mmcls - INFO - Saving checkpoint at 77 epochs
2023-02-05 18:20:37,304 - mmcls - INFO - Epoch(val) [77][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 18:20:45,249 - mmcls - INFO - Saving checkpoint at 78 epochs
2023-02-05 18:20:46,369 - mmcls - INFO - Epoch(val) [78][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 18:20:54,299 - mmcls - INFO - Saving checkpoint at 79 epochs
2023-02-05 18:20:55,418 - mmcls - INFO - Epoch(val) [79][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 18:21:03,334 - mmcls - INFO - Saving checkpoint at 80 epochs
2023-02-05 18:21:04,451 - mmcls - INFO - Epoch(val) [80][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 18:21:12,352 - mmcls - INFO - Saving checkpoint at 81 epochs
2023-02-05 18:21:13,479 - mmcls - INFO - Epoch(val) [81][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 18:21:21,407 - mmcls - INFO - Saving checkpoint at 82 epochs
2023-02-05 18:21:22,535 - mmcls - INFO - Epoch(val) [82][18]	accuracy_top-1: 96.5035, accuracy_top-5: 100.0000
2023-02-05 18:21:30,442 - mmcls - INFO - Saving checkpoint at 83 epochs
2023-02-05 18:21:31,567 - mmcls - INFO - Epoch(val) [83][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 18:21:39,517 - mmcls - INFO - Saving checkpoint at 84 epochs
2023-02-05 18:21:40,638 - mmcls - INFO - Epoch(val) [84][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 18:21:48,577 - mmcls - INFO - Saving checkpoint at 85 epochs
2023-02-05 18:21:49,714 - mmcls - INFO - Epoch(val) [85][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 18:21:57,648 - mmcls - INFO - Saving checkpoint at 86 epochs
2023-02-05 18:21:58,780 - mmcls - INFO - Epoch(val) [86][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 18:22:06,697 - mmcls - INFO - Saving checkpoint at 87 epochs
2023-02-05 18:22:07,840 - mmcls - INFO - Epoch(val) [87][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 18:22:15,774 - mmcls - INFO - Saving checkpoint at 88 epochs
2023-02-05 18:22:16,915 - mmcls - INFO - Epoch(val) [88][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 18:22:24,845 - mmcls - INFO - Saving checkpoint at 89 epochs
2023-02-05 18:22:25,980 - mmcls - INFO - Epoch(val) [89][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 18:22:33,892 - mmcls - INFO - Saving checkpoint at 90 epochs
2023-02-05 18:22:35,025 - mmcls - INFO - Epoch(val) [90][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 18:22:42,950 - mmcls - INFO - Saving checkpoint at 91 epochs
2023-02-05 18:22:44,069 - mmcls - INFO - Epoch(val) [91][18]	accuracy_top-1: 96.5035, accuracy_top-5: 100.0000
2023-02-05 18:22:51,999 - mmcls - INFO - Saving checkpoint at 92 epochs
2023-02-05 18:22:53,136 - mmcls - INFO - Epoch(val) [92][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 18:23:01,068 - mmcls - INFO - Saving checkpoint at 93 epochs
2023-02-05 18:23:02,196 - mmcls - INFO - Epoch(val) [93][18]	accuracy_top-1: 96.5035, accuracy_top-5: 100.0000
2023-02-05 18:23:10,107 - mmcls - INFO - Saving checkpoint at 94 epochs
2023-02-05 18:23:11,238 - mmcls - INFO - Epoch(val) [94][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 18:23:19,153 - mmcls - INFO - Saving checkpoint at 95 epochs
2023-02-05 18:23:20,289 - mmcls - INFO - Epoch(val) [95][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 18:23:28,227 - mmcls - INFO - Saving checkpoint at 96 epochs
2023-02-05 18:23:29,350 - mmcls - INFO - Epoch(val) [96][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 18:23:37,281 - mmcls - INFO - Saving checkpoint at 97 epochs
2023-02-05 18:23:38,419 - mmcls - INFO - Epoch(val) [97][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 18:23:46,360 - mmcls - INFO - Saving checkpoint at 98 epochs
2023-02-05 18:23:47,487 - mmcls - INFO - Epoch(val) [98][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 18:23:55,391 - mmcls - INFO - Saving checkpoint at 99 epochs
2023-02-05 18:23:56,533 - mmcls - INFO - Epoch(val) [99][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-05 18:24:04,455 - mmcls - INFO - Saving checkpoint at 100 epochs
2023-02-05 18:24:05,590 - mmcls - INFO - Epoch(val) [100][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
