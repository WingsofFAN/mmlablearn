2023-02-07 00:46:31,859 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /data/apps/cuda/11.1
NVCC: Cuda compilation tools, release 11.1, V11.1.74
GCC: gcc (GCC) 7.3.0
PyTorch: 1.8.1+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.9.1+cu111
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMClassification: 0.25.0+3d4f80d
------------------------------------------------------------

2023-02-07 00:46:31,860 - mmcls - INFO - Distributed training: False
2023-02-07 00:46:31,959 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=10,
        in_channels=2048,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, )))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='ImageNet',
        data_prefix='data/monkeys/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        ann_file='data/monkeys/train.txt',
        classes='data/monkeys/classes.txt'),
    val=dict(
        type='ImageNet',
        data_prefix='data/monkeys/val',
        ann_file='data/monkeys/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes='data/monkeys/classes.txt'),
    test=dict(
        type='ImageNet',
        data_prefix='data/monkeys/val',
        ann_file='data/monkeys/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes='data/monkeys/classes.txt'))
evaluation = dict(interval=1, metric='accuracy')
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = '/HOME/scz0apx/run/mmclassification/resnet50_8xb32_in1k_20210831-ea4938fc.pth'
resume_from = None
workflow = [('train', 1)]
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[1])
runner = dict(type='EpochBasedRunner', max_epochs=200)
work_dir = 'work/resnet50_monkeys'
gpu_ids = [0]

2023-02-07 00:46:32,043 - mmcls - INFO - Set random seed to 608958921, deterministic: False
2023-02-07 00:46:32,234 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-07 00:46:32,450 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([10, 2048]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([10]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-07 00:46:48,212 - mmcls - INFO - load checkpoint from local path: /HOME/scz0apx/run/mmclassification/resnet50_8xb32_in1k_20210831-ea4938fc.pth
2023-02-07 00:46:48,658 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 2048]) from checkpoint, the shape in current model is torch.Size([10, 2048]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([10]).
2023-02-07 00:46:48,658 - mmcls - INFO - Start running, host: scz0apx@g0097, work_dir: /data/run01/scz0apx/mmclassification/work/resnet50_monkeys
2023-02-07 00:46:48,659 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-07 00:46:48,659 - mmcls - INFO - workflow: [('train', 1)], max: 200 epochs
2023-02-07 00:46:48,659 - mmcls - INFO - Checkpoints will be saved to /data/run01/scz0apx/mmclassification/work/resnet50_monkeys by HardDiskBackend.
2023-02-07 00:47:03,557 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-07 00:47:07,824 - mmcls - INFO - Epoch(val) [1][9]	accuracy_top-1: 96.7153, accuracy_top-5: 99.6350
2023-02-07 00:47:19,723 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-07 00:47:23,583 - mmcls - INFO - Epoch(val) [2][9]	accuracy_top-1: 97.4453, accuracy_top-5: 100.0000
2023-02-07 00:47:36,980 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-07 00:47:40,840 - mmcls - INFO - Epoch(val) [3][9]	accuracy_top-1: 98.9051, accuracy_top-5: 100.0000
2023-02-07 00:47:52,976 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-07 00:47:56,912 - mmcls - INFO - Epoch(val) [4][9]	accuracy_top-1: 97.8102, accuracy_top-5: 100.0000
2023-02-07 00:48:09,129 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-07 00:48:12,976 - mmcls - INFO - Epoch(val) [5][9]	accuracy_top-1: 98.9051, accuracy_top-5: 100.0000
2023-02-07 00:48:25,359 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-07 00:48:29,251 - mmcls - INFO - Epoch(val) [6][9]	accuracy_top-1: 98.5401, accuracy_top-5: 100.0000
2023-02-07 00:48:41,313 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-07 00:48:45,166 - mmcls - INFO - Epoch(val) [7][9]	accuracy_top-1: 99.2701, accuracy_top-5: 100.0000
2023-02-07 00:48:57,951 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-07 00:49:01,808 - mmcls - INFO - Epoch(val) [8][9]	accuracy_top-1: 98.9051, accuracy_top-5: 100.0000
2023-02-07 00:49:14,871 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-07 00:49:18,716 - mmcls - INFO - Epoch(val) [9][9]	accuracy_top-1: 99.2701, accuracy_top-5: 100.0000
2023-02-07 00:49:31,411 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-07 00:49:35,273 - mmcls - INFO - Epoch(val) [10][9]	accuracy_top-1: 99.2701, accuracy_top-5: 100.0000
2023-02-07 00:49:47,542 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-07 00:49:51,396 - mmcls - INFO - Epoch(val) [11][9]	accuracy_top-1: 99.2701, accuracy_top-5: 100.0000
2023-02-07 00:50:03,791 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-07 00:50:07,646 - mmcls - INFO - Epoch(val) [12][9]	accuracy_top-1: 99.2701, accuracy_top-5: 100.0000
2023-02-07 00:50:20,055 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-07 00:50:23,912 - mmcls - INFO - Epoch(val) [13][9]	accuracy_top-1: 99.2701, accuracy_top-5: 100.0000
2023-02-07 00:50:36,221 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-07 00:50:40,080 - mmcls - INFO - Epoch(val) [14][9]	accuracy_top-1: 99.2701, accuracy_top-5: 100.0000
2023-02-07 00:50:52,023 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-07 00:50:55,870 - mmcls - INFO - Epoch(val) [15][9]	accuracy_top-1: 99.2701, accuracy_top-5: 100.0000
2023-02-07 00:51:08,094 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-07 00:51:11,933 - mmcls - INFO - Epoch(val) [16][9]	accuracy_top-1: 99.2701, accuracy_top-5: 100.0000
2023-02-07 00:51:23,956 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-07 00:51:27,820 - mmcls - INFO - Epoch(val) [17][9]	accuracy_top-1: 98.5401, accuracy_top-5: 100.0000
2023-02-07 00:51:40,252 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-07 00:51:44,093 - mmcls - INFO - Epoch(val) [18][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:51:56,585 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-07 00:52:00,443 - mmcls - INFO - Epoch(val) [19][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:52:13,115 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-07 00:52:16,975 - mmcls - INFO - Epoch(val) [20][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:52:29,452 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-07 00:52:33,298 - mmcls - INFO - Epoch(val) [21][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:52:45,968 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-07 00:52:49,821 - mmcls - INFO - Epoch(val) [22][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:53:02,021 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-07 00:53:05,875 - mmcls - INFO - Epoch(val) [23][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:53:18,006 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-07 00:53:21,856 - mmcls - INFO - Epoch(val) [24][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:53:34,138 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-07 00:53:37,997 - mmcls - INFO - Epoch(val) [25][9]	accuracy_top-1: 99.2701, accuracy_top-5: 100.0000
2023-02-07 00:53:49,873 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-07 00:53:53,719 - mmcls - INFO - Epoch(val) [26][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:54:05,723 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-07 00:54:09,578 - mmcls - INFO - Epoch(val) [27][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:54:22,412 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-07 00:54:26,265 - mmcls - INFO - Epoch(val) [28][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:54:38,852 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-07 00:54:42,709 - mmcls - INFO - Epoch(val) [29][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:54:55,543 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-07 00:54:59,405 - mmcls - INFO - Epoch(val) [30][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:55:11,708 - mmcls - INFO - Saving checkpoint at 31 epochs
2023-02-07 00:55:15,563 - mmcls - INFO - Epoch(val) [31][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:55:27,678 - mmcls - INFO - Saving checkpoint at 32 epochs
2023-02-07 00:55:31,523 - mmcls - INFO - Epoch(val) [32][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:55:44,336 - mmcls - INFO - Saving checkpoint at 33 epochs
2023-02-07 00:55:48,201 - mmcls - INFO - Epoch(val) [33][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:56:00,139 - mmcls - INFO - Saving checkpoint at 34 epochs
2023-02-07 00:56:03,994 - mmcls - INFO - Epoch(val) [34][9]	accuracy_top-1: 99.2701, accuracy_top-5: 100.0000
2023-02-07 00:56:16,865 - mmcls - INFO - Saving checkpoint at 35 epochs
2023-02-07 00:56:20,715 - mmcls - INFO - Epoch(val) [35][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:56:33,127 - mmcls - INFO - Saving checkpoint at 36 epochs
2023-02-07 00:56:36,988 - mmcls - INFO - Epoch(val) [36][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:56:49,221 - mmcls - INFO - Saving checkpoint at 37 epochs
2023-02-07 00:56:53,067 - mmcls - INFO - Epoch(val) [37][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:57:04,997 - mmcls - INFO - Saving checkpoint at 38 epochs
2023-02-07 00:57:08,847 - mmcls - INFO - Epoch(val) [38][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:57:21,645 - mmcls - INFO - Saving checkpoint at 39 epochs
2023-02-07 00:57:25,499 - mmcls - INFO - Epoch(val) [39][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:57:37,842 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-07 00:57:41,698 - mmcls - INFO - Epoch(val) [40][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:57:54,535 - mmcls - INFO - Saving checkpoint at 41 epochs
2023-02-07 00:57:58,391 - mmcls - INFO - Epoch(val) [41][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:58:10,397 - mmcls - INFO - Saving checkpoint at 42 epochs
2023-02-07 00:58:14,259 - mmcls - INFO - Epoch(val) [42][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:58:26,249 - mmcls - INFO - Saving checkpoint at 43 epochs
2023-02-07 00:58:30,106 - mmcls - INFO - Epoch(val) [43][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:58:42,109 - mmcls - INFO - Saving checkpoint at 44 epochs
2023-02-07 00:58:45,965 - mmcls - INFO - Epoch(val) [44][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:58:58,333 - mmcls - INFO - Saving checkpoint at 45 epochs
2023-02-07 00:59:02,194 - mmcls - INFO - Epoch(val) [45][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 00:59:14,431 - mmcls - INFO - Saving checkpoint at 46 epochs
2023-02-07 00:59:18,284 - mmcls - INFO - Epoch(val) [46][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 00:59:30,380 - mmcls - INFO - Saving checkpoint at 47 epochs
2023-02-07 00:59:34,235 - mmcls - INFO - Epoch(val) [47][9]	accuracy_top-1: 99.2701, accuracy_top-5: 100.0000
2023-02-07 00:59:46,963 - mmcls - INFO - Saving checkpoint at 48 epochs
2023-02-07 00:59:50,824 - mmcls - INFO - Epoch(val) [48][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:00:02,911 - mmcls - INFO - Saving checkpoint at 49 epochs
2023-02-07 01:00:06,765 - mmcls - INFO - Epoch(val) [49][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:00:19,235 - mmcls - INFO - Saving checkpoint at 50 epochs
2023-02-07 01:00:23,085 - mmcls - INFO - Epoch(val) [50][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 01:00:35,996 - mmcls - INFO - Saving checkpoint at 51 epochs
2023-02-07 01:00:39,850 - mmcls - INFO - Epoch(val) [51][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 01:00:52,125 - mmcls - INFO - Saving checkpoint at 52 epochs
2023-02-07 01:00:55,983 - mmcls - INFO - Epoch(val) [52][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:01:08,316 - mmcls - INFO - Saving checkpoint at 53 epochs
2023-02-07 01:01:12,169 - mmcls - INFO - Epoch(val) [53][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 01:01:24,948 - mmcls - INFO - Saving checkpoint at 54 epochs
2023-02-07 01:01:28,803 - mmcls - INFO - Epoch(val) [54][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:01:41,424 - mmcls - INFO - Saving checkpoint at 55 epochs
2023-02-07 01:01:45,292 - mmcls - INFO - Epoch(val) [55][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:01:57,392 - mmcls - INFO - Saving checkpoint at 56 epochs
2023-02-07 01:02:02,432 - mmcls - INFO - Epoch(val) [56][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:02:14,555 - mmcls - INFO - Saving checkpoint at 57 epochs
2023-02-07 01:02:18,408 - mmcls - INFO - Epoch(val) [57][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:02:30,404 - mmcls - INFO - Saving checkpoint at 58 epochs
2023-02-07 01:02:34,262 - mmcls - INFO - Epoch(val) [58][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 01:02:46,301 - mmcls - INFO - Saving checkpoint at 59 epochs
2023-02-07 01:02:50,155 - mmcls - INFO - Epoch(val) [59][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:03:02,542 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-07 01:03:06,405 - mmcls - INFO - Epoch(val) [60][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:03:18,767 - mmcls - INFO - Saving checkpoint at 61 epochs
2023-02-07 01:03:22,631 - mmcls - INFO - Epoch(val) [61][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:03:35,074 - mmcls - INFO - Saving checkpoint at 62 epochs
2023-02-07 01:03:38,933 - mmcls - INFO - Epoch(val) [62][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:03:50,899 - mmcls - INFO - Saving checkpoint at 63 epochs
2023-02-07 01:03:54,746 - mmcls - INFO - Epoch(val) [63][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 01:04:06,919 - mmcls - INFO - Saving checkpoint at 64 epochs
2023-02-07 01:04:10,780 - mmcls - INFO - Epoch(val) [64][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:04:22,701 - mmcls - INFO - Saving checkpoint at 65 epochs
2023-02-07 01:04:26,547 - mmcls - INFO - Epoch(val) [65][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:04:39,027 - mmcls - INFO - Saving checkpoint at 66 epochs
2023-02-07 01:04:42,883 - mmcls - INFO - Epoch(val) [66][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:04:54,755 - mmcls - INFO - Saving checkpoint at 67 epochs
2023-02-07 01:04:58,609 - mmcls - INFO - Epoch(val) [67][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:05:10,555 - mmcls - INFO - Saving checkpoint at 68 epochs
2023-02-07 01:05:14,411 - mmcls - INFO - Epoch(val) [68][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:05:26,433 - mmcls - INFO - Saving checkpoint at 69 epochs
2023-02-07 01:05:30,294 - mmcls - INFO - Epoch(val) [69][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:05:42,121 - mmcls - INFO - Saving checkpoint at 70 epochs
2023-02-07 01:05:45,977 - mmcls - INFO - Epoch(val) [70][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 01:05:57,972 - mmcls - INFO - Saving checkpoint at 71 epochs
2023-02-07 01:06:01,832 - mmcls - INFO - Epoch(val) [71][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 01:06:13,855 - mmcls - INFO - Saving checkpoint at 72 epochs
2023-02-07 01:06:17,700 - mmcls - INFO - Epoch(val) [72][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:06:30,328 - mmcls - INFO - Saving checkpoint at 73 epochs
2023-02-07 01:06:34,193 - mmcls - INFO - Epoch(val) [73][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:06:46,657 - mmcls - INFO - Saving checkpoint at 74 epochs
2023-02-07 01:06:50,496 - mmcls - INFO - Epoch(val) [74][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:07:03,157 - mmcls - INFO - Saving checkpoint at 75 epochs
2023-02-07 01:07:07,008 - mmcls - INFO - Epoch(val) [75][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:07:19,056 - mmcls - INFO - Saving checkpoint at 76 epochs
2023-02-07 01:07:22,914 - mmcls - INFO - Epoch(val) [76][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:07:35,185 - mmcls - INFO - Saving checkpoint at 77 epochs
2023-02-07 01:07:39,058 - mmcls - INFO - Epoch(val) [77][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:07:51,666 - mmcls - INFO - Saving checkpoint at 78 epochs
2023-02-07 01:07:55,521 - mmcls - INFO - Epoch(val) [78][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:08:07,565 - mmcls - INFO - Saving checkpoint at 79 epochs
2023-02-07 01:08:11,413 - mmcls - INFO - Epoch(val) [79][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:08:23,790 - mmcls - INFO - Saving checkpoint at 80 epochs
2023-02-07 01:08:27,641 - mmcls - INFO - Epoch(val) [80][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:08:40,000 - mmcls - INFO - Saving checkpoint at 81 epochs
2023-02-07 01:08:43,863 - mmcls - INFO - Epoch(val) [81][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:08:55,901 - mmcls - INFO - Saving checkpoint at 82 epochs
2023-02-07 01:08:59,753 - mmcls - INFO - Epoch(val) [82][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 01:09:12,124 - mmcls - INFO - Saving checkpoint at 83 epochs
2023-02-07 01:09:15,980 - mmcls - INFO - Epoch(val) [83][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:09:28,431 - mmcls - INFO - Saving checkpoint at 84 epochs
2023-02-07 01:09:32,285 - mmcls - INFO - Epoch(val) [84][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:09:45,549 - mmcls - INFO - Saving checkpoint at 85 epochs
2023-02-07 01:09:49,406 - mmcls - INFO - Epoch(val) [85][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:10:01,949 - mmcls - INFO - Saving checkpoint at 86 epochs
2023-02-07 01:10:05,802 - mmcls - INFO - Epoch(val) [86][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:10:18,207 - mmcls - INFO - Saving checkpoint at 87 epochs
2023-02-07 01:10:22,062 - mmcls - INFO - Epoch(val) [87][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:10:34,131 - mmcls - INFO - Saving checkpoint at 88 epochs
2023-02-07 01:10:37,980 - mmcls - INFO - Epoch(val) [88][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:10:50,261 - mmcls - INFO - Saving checkpoint at 89 epochs
2023-02-07 01:10:54,125 - mmcls - INFO - Epoch(val) [89][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:11:06,626 - mmcls - INFO - Saving checkpoint at 90 epochs
2023-02-07 01:11:10,485 - mmcls - INFO - Epoch(val) [90][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:11:23,349 - mmcls - INFO - Saving checkpoint at 91 epochs
2023-02-07 01:11:27,201 - mmcls - INFO - Epoch(val) [91][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:11:39,621 - mmcls - INFO - Saving checkpoint at 92 epochs
2023-02-07 01:11:43,467 - mmcls - INFO - Epoch(val) [92][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 01:11:55,927 - mmcls - INFO - Saving checkpoint at 93 epochs
2023-02-07 01:11:59,793 - mmcls - INFO - Epoch(val) [93][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:12:12,146 - mmcls - INFO - Saving checkpoint at 94 epochs
2023-02-07 01:12:15,995 - mmcls - INFO - Epoch(val) [94][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 01:12:28,585 - mmcls - INFO - Saving checkpoint at 95 epochs
2023-02-07 01:12:32,440 - mmcls - INFO - Epoch(val) [95][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 01:12:44,583 - mmcls - INFO - Saving checkpoint at 96 epochs
2023-02-07 01:12:48,438 - mmcls - INFO - Epoch(val) [96][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:13:01,513 - mmcls - INFO - Saving checkpoint at 97 epochs
2023-02-07 01:13:05,360 - mmcls - INFO - Epoch(val) [97][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:13:18,299 - mmcls - INFO - Saving checkpoint at 98 epochs
2023-02-07 01:13:22,153 - mmcls - INFO - Epoch(val) [98][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:13:35,046 - mmcls - INFO - Saving checkpoint at 99 epochs
2023-02-07 01:13:38,907 - mmcls - INFO - Epoch(val) [99][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:13:51,078 - mmcls - INFO - Saving checkpoint at 100 epochs
2023-02-07 01:13:54,927 - mmcls - INFO - Epoch(val) [100][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:14:07,463 - mmcls - INFO - Saving checkpoint at 101 epochs
2023-02-07 01:14:11,314 - mmcls - INFO - Epoch(val) [101][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:14:24,216 - mmcls - INFO - Saving checkpoint at 102 epochs
2023-02-07 01:14:28,073 - mmcls - INFO - Epoch(val) [102][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:14:40,650 - mmcls - INFO - Saving checkpoint at 103 epochs
2023-02-07 01:14:44,488 - mmcls - INFO - Epoch(val) [103][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:14:57,405 - mmcls - INFO - Saving checkpoint at 104 epochs
2023-02-07 01:15:01,262 - mmcls - INFO - Epoch(val) [104][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:15:13,791 - mmcls - INFO - Saving checkpoint at 105 epochs
2023-02-07 01:15:17,637 - mmcls - INFO - Epoch(val) [105][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:15:29,748 - mmcls - INFO - Saving checkpoint at 106 epochs
2023-02-07 01:15:33,596 - mmcls - INFO - Epoch(val) [106][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:15:46,352 - mmcls - INFO - Saving checkpoint at 107 epochs
2023-02-07 01:15:50,190 - mmcls - INFO - Epoch(val) [107][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:16:02,736 - mmcls - INFO - Saving checkpoint at 108 epochs
2023-02-07 01:16:06,598 - mmcls - INFO - Epoch(val) [108][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:16:19,542 - mmcls - INFO - Saving checkpoint at 109 epochs
2023-02-07 01:16:23,406 - mmcls - INFO - Epoch(val) [109][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:16:35,982 - mmcls - INFO - Saving checkpoint at 110 epochs
2023-02-07 01:16:39,835 - mmcls - INFO - Epoch(val) [110][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:16:51,953 - mmcls - INFO - Saving checkpoint at 111 epochs
2023-02-07 01:16:55,805 - mmcls - INFO - Epoch(val) [111][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:17:08,275 - mmcls - INFO - Saving checkpoint at 112 epochs
2023-02-07 01:17:12,132 - mmcls - INFO - Epoch(val) [112][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:17:24,754 - mmcls - INFO - Saving checkpoint at 113 epochs
2023-02-07 01:17:28,615 - mmcls - INFO - Epoch(val) [113][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:17:40,974 - mmcls - INFO - Saving checkpoint at 114 epochs
2023-02-07 01:17:44,821 - mmcls - INFO - Epoch(val) [114][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:17:57,061 - mmcls - INFO - Saving checkpoint at 115 epochs
2023-02-07 01:18:00,913 - mmcls - INFO - Epoch(val) [115][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 01:18:13,059 - mmcls - INFO - Saving checkpoint at 116 epochs
2023-02-07 01:18:16,924 - mmcls - INFO - Epoch(val) [116][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:18:29,265 - mmcls - INFO - Saving checkpoint at 117 epochs
2023-02-07 01:18:33,123 - mmcls - INFO - Epoch(val) [117][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:18:45,019 - mmcls - INFO - Saving checkpoint at 118 epochs
2023-02-07 01:18:48,880 - mmcls - INFO - Epoch(val) [118][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:19:01,022 - mmcls - INFO - Saving checkpoint at 119 epochs
2023-02-07 01:19:04,870 - mmcls - INFO - Epoch(val) [119][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:19:16,882 - mmcls - INFO - Saving checkpoint at 120 epochs
2023-02-07 01:19:20,725 - mmcls - INFO - Epoch(val) [120][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:19:33,074 - mmcls - INFO - Saving checkpoint at 121 epochs
2023-02-07 01:19:36,928 - mmcls - INFO - Epoch(val) [121][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:19:49,247 - mmcls - INFO - Saving checkpoint at 122 epochs
2023-02-07 01:19:53,101 - mmcls - INFO - Epoch(val) [122][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:20:05,066 - mmcls - INFO - Saving checkpoint at 123 epochs
2023-02-07 01:20:08,963 - mmcls - INFO - Epoch(val) [123][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:20:21,611 - mmcls - INFO - Saving checkpoint at 124 epochs
2023-02-07 01:20:25,459 - mmcls - INFO - Epoch(val) [124][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:20:37,733 - mmcls - INFO - Saving checkpoint at 125 epochs
2023-02-07 01:20:41,579 - mmcls - INFO - Epoch(val) [125][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:20:54,653 - mmcls - INFO - Saving checkpoint at 126 epochs
2023-02-07 01:20:58,500 - mmcls - INFO - Epoch(val) [126][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:21:10,482 - mmcls - INFO - Saving checkpoint at 127 epochs
2023-02-07 01:21:14,326 - mmcls - INFO - Epoch(val) [127][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:21:26,580 - mmcls - INFO - Saving checkpoint at 128 epochs
2023-02-07 01:21:30,427 - mmcls - INFO - Epoch(val) [128][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:21:42,383 - mmcls - INFO - Saving checkpoint at 129 epochs
2023-02-07 01:21:46,237 - mmcls - INFO - Epoch(val) [129][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:21:59,111 - mmcls - INFO - Saving checkpoint at 130 epochs
2023-02-07 01:22:02,956 - mmcls - INFO - Epoch(val) [130][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:22:14,958 - mmcls - INFO - Saving checkpoint at 131 epochs
2023-02-07 01:22:18,827 - mmcls - INFO - Epoch(val) [131][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 01:22:30,633 - mmcls - INFO - Saving checkpoint at 132 epochs
2023-02-07 01:22:34,483 - mmcls - INFO - Epoch(val) [132][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:22:46,550 - mmcls - INFO - Saving checkpoint at 133 epochs
2023-02-07 01:22:50,404 - mmcls - INFO - Epoch(val) [133][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:23:03,007 - mmcls - INFO - Saving checkpoint at 134 epochs
2023-02-07 01:23:06,847 - mmcls - INFO - Epoch(val) [134][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:23:18,756 - mmcls - INFO - Saving checkpoint at 135 epochs
2023-02-07 01:23:22,605 - mmcls - INFO - Epoch(val) [135][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:23:34,514 - mmcls - INFO - Saving checkpoint at 136 epochs
2023-02-07 01:23:38,366 - mmcls - INFO - Epoch(val) [136][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:23:51,915 - mmcls - INFO - Saving checkpoint at 137 epochs
2023-02-07 01:23:55,783 - mmcls - INFO - Epoch(val) [137][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:24:08,043 - mmcls - INFO - Saving checkpoint at 138 epochs
2023-02-07 01:24:11,898 - mmcls - INFO - Epoch(val) [138][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 01:24:24,032 - mmcls - INFO - Saving checkpoint at 139 epochs
2023-02-07 01:24:27,883 - mmcls - INFO - Epoch(val) [139][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:24:40,147 - mmcls - INFO - Saving checkpoint at 140 epochs
2023-02-07 01:24:44,003 - mmcls - INFO - Epoch(val) [140][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:24:56,756 - mmcls - INFO - Saving checkpoint at 141 epochs
2023-02-07 01:25:00,620 - mmcls - INFO - Epoch(val) [141][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:25:13,114 - mmcls - INFO - Saving checkpoint at 142 epochs
2023-02-07 01:25:16,966 - mmcls - INFO - Epoch(val) [142][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 01:25:29,689 - mmcls - INFO - Saving checkpoint at 143 epochs
2023-02-07 01:25:33,536 - mmcls - INFO - Epoch(val) [143][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:25:46,206 - mmcls - INFO - Saving checkpoint at 144 epochs
2023-02-07 01:25:50,061 - mmcls - INFO - Epoch(val) [144][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:26:01,938 - mmcls - INFO - Saving checkpoint at 145 epochs
2023-02-07 01:26:05,801 - mmcls - INFO - Epoch(val) [145][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:26:17,985 - mmcls - INFO - Saving checkpoint at 146 epochs
2023-02-07 01:26:21,833 - mmcls - INFO - Epoch(val) [146][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:26:33,677 - mmcls - INFO - Saving checkpoint at 147 epochs
2023-02-07 01:26:37,541 - mmcls - INFO - Epoch(val) [147][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:26:49,483 - mmcls - INFO - Saving checkpoint at 148 epochs
2023-02-07 01:26:53,324 - mmcls - INFO - Epoch(val) [148][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:27:05,408 - mmcls - INFO - Saving checkpoint at 149 epochs
2023-02-07 01:27:09,264 - mmcls - INFO - Epoch(val) [149][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:27:21,881 - mmcls - INFO - Saving checkpoint at 150 epochs
2023-02-07 01:27:25,727 - mmcls - INFO - Epoch(val) [150][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:27:37,781 - mmcls - INFO - Saving checkpoint at 151 epochs
2023-02-07 01:27:41,637 - mmcls - INFO - Epoch(val) [151][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:27:53,795 - mmcls - INFO - Saving checkpoint at 152 epochs
2023-02-07 01:27:57,650 - mmcls - INFO - Epoch(val) [152][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:28:09,632 - mmcls - INFO - Saving checkpoint at 153 epochs
2023-02-07 01:28:13,487 - mmcls - INFO - Epoch(val) [153][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:28:25,614 - mmcls - INFO - Saving checkpoint at 154 epochs
2023-02-07 01:28:29,471 - mmcls - INFO - Epoch(val) [154][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:28:41,581 - mmcls - INFO - Saving checkpoint at 155 epochs
2023-02-07 01:28:45,438 - mmcls - INFO - Epoch(val) [155][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:28:58,360 - mmcls - INFO - Saving checkpoint at 156 epochs
2023-02-07 01:29:02,221 - mmcls - INFO - Epoch(val) [156][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:29:15,396 - mmcls - INFO - Saving checkpoint at 157 epochs
2023-02-07 01:29:19,249 - mmcls - INFO - Epoch(val) [157][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:29:32,443 - mmcls - INFO - Saving checkpoint at 158 epochs
2023-02-07 01:29:36,295 - mmcls - INFO - Epoch(val) [158][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 01:29:48,568 - mmcls - INFO - Saving checkpoint at 159 epochs
2023-02-07 01:29:52,415 - mmcls - INFO - Epoch(val) [159][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:30:04,338 - mmcls - INFO - Saving checkpoint at 160 epochs
2023-02-07 01:30:08,187 - mmcls - INFO - Epoch(val) [160][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:30:20,197 - mmcls - INFO - Saving checkpoint at 161 epochs
2023-02-07 01:30:24,036 - mmcls - INFO - Epoch(val) [161][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:30:36,743 - mmcls - INFO - Saving checkpoint at 162 epochs
2023-02-07 01:30:40,604 - mmcls - INFO - Epoch(val) [162][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:30:52,554 - mmcls - INFO - Saving checkpoint at 163 epochs
2023-02-07 01:30:56,403 - mmcls - INFO - Epoch(val) [163][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:31:09,241 - mmcls - INFO - Saving checkpoint at 164 epochs
2023-02-07 01:31:13,116 - mmcls - INFO - Epoch(val) [164][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 01:31:25,036 - mmcls - INFO - Saving checkpoint at 165 epochs
2023-02-07 01:31:28,910 - mmcls - INFO - Epoch(val) [165][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:31:41,369 - mmcls - INFO - Saving checkpoint at 166 epochs
2023-02-07 01:31:45,248 - mmcls - INFO - Epoch(val) [166][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 01:31:58,144 - mmcls - INFO - Saving checkpoint at 167 epochs
2023-02-07 01:32:02,006 - mmcls - INFO - Epoch(val) [167][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 01:32:14,367 - mmcls - INFO - Saving checkpoint at 168 epochs
2023-02-07 01:32:18,223 - mmcls - INFO - Epoch(val) [168][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:32:30,874 - mmcls - INFO - Saving checkpoint at 169 epochs
2023-02-07 01:32:34,728 - mmcls - INFO - Epoch(val) [169][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 01:32:46,557 - mmcls - INFO - Saving checkpoint at 170 epochs
2023-02-07 01:32:50,410 - mmcls - INFO - Epoch(val) [170][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:33:03,218 - mmcls - INFO - Saving checkpoint at 171 epochs
2023-02-07 01:33:07,068 - mmcls - INFO - Epoch(val) [171][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:33:19,270 - mmcls - INFO - Saving checkpoint at 172 epochs
2023-02-07 01:33:23,120 - mmcls - INFO - Epoch(val) [172][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:33:35,767 - mmcls - INFO - Saving checkpoint at 173 epochs
2023-02-07 01:33:39,621 - mmcls - INFO - Epoch(val) [173][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:33:52,206 - mmcls - INFO - Saving checkpoint at 174 epochs
2023-02-07 01:33:56,064 - mmcls - INFO - Epoch(val) [174][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:34:08,059 - mmcls - INFO - Saving checkpoint at 175 epochs
2023-02-07 01:34:11,905 - mmcls - INFO - Epoch(val) [175][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 01:34:23,921 - mmcls - INFO - Saving checkpoint at 176 epochs
2023-02-07 01:34:27,779 - mmcls - INFO - Epoch(val) [176][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:34:40,000 - mmcls - INFO - Saving checkpoint at 177 epochs
2023-02-07 01:34:43,872 - mmcls - INFO - Epoch(val) [177][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:34:55,941 - mmcls - INFO - Saving checkpoint at 178 epochs
2023-02-07 01:34:59,798 - mmcls - INFO - Epoch(val) [178][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:35:12,433 - mmcls - INFO - Saving checkpoint at 179 epochs
2023-02-07 01:35:16,298 - mmcls - INFO - Epoch(val) [179][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:35:29,375 - mmcls - INFO - Saving checkpoint at 180 epochs
2023-02-07 01:35:33,233 - mmcls - INFO - Epoch(val) [180][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:35:45,868 - mmcls - INFO - Saving checkpoint at 181 epochs
2023-02-07 01:35:49,736 - mmcls - INFO - Epoch(val) [181][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:36:02,473 - mmcls - INFO - Saving checkpoint at 182 epochs
2023-02-07 01:36:06,318 - mmcls - INFO - Epoch(val) [182][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:36:18,334 - mmcls - INFO - Saving checkpoint at 183 epochs
2023-02-07 01:36:22,188 - mmcls - INFO - Epoch(val) [183][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:36:34,688 - mmcls - INFO - Saving checkpoint at 184 epochs
2023-02-07 01:36:38,542 - mmcls - INFO - Epoch(val) [184][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:36:51,594 - mmcls - INFO - Saving checkpoint at 185 epochs
2023-02-07 01:36:55,468 - mmcls - INFO - Epoch(val) [185][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:37:08,331 - mmcls - INFO - Saving checkpoint at 186 epochs
2023-02-07 01:37:12,187 - mmcls - INFO - Epoch(val) [186][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:37:24,535 - mmcls - INFO - Saving checkpoint at 187 epochs
2023-02-07 01:37:28,390 - mmcls - INFO - Epoch(val) [187][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:37:40,649 - mmcls - INFO - Saving checkpoint at 188 epochs
2023-02-07 01:37:44,506 - mmcls - INFO - Epoch(val) [188][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:37:56,743 - mmcls - INFO - Saving checkpoint at 189 epochs
2023-02-07 01:38:00,603 - mmcls - INFO - Epoch(val) [189][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 01:38:12,844 - mmcls - INFO - Saving checkpoint at 190 epochs
2023-02-07 01:38:16,692 - mmcls - INFO - Epoch(val) [190][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:38:29,077 - mmcls - INFO - Saving checkpoint at 191 epochs
2023-02-07 01:38:32,942 - mmcls - INFO - Epoch(val) [191][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:38:44,910 - mmcls - INFO - Saving checkpoint at 192 epochs
2023-02-07 01:38:48,768 - mmcls - INFO - Epoch(val) [192][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:39:00,778 - mmcls - INFO - Saving checkpoint at 193 epochs
2023-02-07 01:39:04,644 - mmcls - INFO - Epoch(val) [193][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:39:16,840 - mmcls - INFO - Saving checkpoint at 194 epochs
2023-02-07 01:39:20,701 - mmcls - INFO - Epoch(val) [194][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:39:33,545 - mmcls - INFO - Saving checkpoint at 195 epochs
2023-02-07 01:39:37,404 - mmcls - INFO - Epoch(val) [195][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:39:49,738 - mmcls - INFO - Saving checkpoint at 196 epochs
2023-02-07 01:39:53,597 - mmcls - INFO - Epoch(val) [196][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:40:05,927 - mmcls - INFO - Saving checkpoint at 197 epochs
2023-02-07 01:40:09,783 - mmcls - INFO - Epoch(val) [197][9]	accuracy_top-1: 99.6350, accuracy_top-5: 100.0000
2023-02-07 01:40:21,921 - mmcls - INFO - Saving checkpoint at 198 epochs
2023-02-07 01:40:25,776 - mmcls - INFO - Epoch(val) [198][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:40:37,729 - mmcls - INFO - Saving checkpoint at 199 epochs
2023-02-07 01:40:41,595 - mmcls - INFO - Epoch(val) [199][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
2023-02-07 01:40:54,567 - mmcls - INFO - Saving checkpoint at 200 epochs
2023-02-07 01:40:58,442 - mmcls - INFO - Epoch(val) [200][9]	accuracy_top-1: 100.0000, accuracy_top-5: 100.0000
